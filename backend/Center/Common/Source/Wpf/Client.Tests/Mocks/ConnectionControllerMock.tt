<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ ImportProject Processor="ImportProjectDirectiveProcessor" Projects="..\..\..\T4Templating\Center.Common.T4Templating.csproj" UnloadGenerationAppDomain="true" #>

<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Gorba.Center.Common.T4Templating" #>
<#@ output extension=".generated.cs" #>
<#
    var path = this.Host.ResolvePath(@"..\..\..\ServiceModel\EntitySpace.xml");
    var entitySpace = EntitySpace.Load(path);
#>
namespace Gorba.Center.Common.Wpf.Client.Tests.Mocks
{
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Threading;
    using System.Threading.Tasks;	
    
    using Gorba.Center.Common.Client;
    using Gorba.Center.Common.Client.ChangeTracking;
    using Gorba.Center.Common.ServiceModel;
    using Gorba.Center.Common.ServiceModel.ChangeTracking;
    using Gorba.Center.Common.ServiceModel.Notifications;
    using Gorba.Center.Common.ServiceModel.Security;
<#
    foreach (var partition in entitySpace.Partitions)
    {
        this.WriteUsing(partition);
    }
    #>

    public partial class ConnectionControllerMock
    {

<#
    foreach (var partition in entitySpace.Partitions)
    {
        foreach (var entity in partition.Entities.Where(entity => entity.HasChangeTracking))
        {
            this.WriteProperty(entity);
        }
    }
    #>

        private void ConfigureChangeTrackingManagers()
        {
<#
    foreach (var partition in entitySpace.Partitions)
    {
        foreach (var entity in partition.Entities.Where(e => e.HasChangeTracking))
        {
            this.WriteEntityChangeTrackingSetup(entity);
        }
    }
    #>

        }
    }
}

<#+
    private void WriteUsing(EntitySpace.Partition partition)
    {
#>
    using Gorba.Center.Common.ServiceModel.ChangeTracking.<#= partition.Name #>;
<#+
    }

    private void WriteEntityChangeTrackingSetup(EntitySpace.Entity entity)
    {
        #>
            this.<#= entity.Name #>ChangeTrackingManager = new <#= entity.Name #>ChangeTrackingManagerMock();
            DependencyResolver.Current.Register(this.<#= entity.Name #>ChangeTrackingManager);
<#+
    }

    private void WriteProperty(EntitySpace.Entity entity)
    {
#>
        public virtual I<#=entity.Name #>ChangeTrackingManager <#= entity.Name #>ChangeTrackingManager { get; private set; }

<#+
    }
    #>
