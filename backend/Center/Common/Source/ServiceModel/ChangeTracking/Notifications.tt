<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ ImportProject Processor="ImportProjectDirectiveProcessor" Projects="..\..\T4Templating\Center.Common.T4Templating.csproj" UnloadGenerationAppDomain="true" #>
<#@ Compile Processor="CompileDirectiveProcessor" Items="..\ServiceModelExtensions.cs" Assemblies="System.Core.dll;System.Data.Entity.Design.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Gorba.Center.Common.T4Templating" #>
<#@ import namespace="Gorba.Center.Common.ServiceModel" #>
<#@ output extension=".generated.cs" #>
<#
    var path = this.Host.ResolvePath(@"..\EntitySpace.xml");
    this.entitySpace = EntitySpace.Load(path);
#>
namespace Gorba.Center.Common.ServiceModel.ChangeTracking
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text;
    using System.Xml;

<#
    foreach (var partition in this.entitySpace.Partitions)
    {
        this.WriteUsings(partition);
    }

    foreach (var partition in entitySpace.Partitions)
    {#>

    namespace <#= partition.Name #>
    {<#
            foreach (var entity in partition.Entities.Where(entity => entity.HasChangeTracking))
            {
                this.WriteEntity(entity);
            }
#>
    }
<#
    }
    #>
}
<#+
    private EntitySpace entitySpace;

    private void WriteUsings(EntitySpace.Partition partition)
    {#>
    using Gorba.Center.Common.ServiceModel.ChangeTracking.<#= partition.Name #>;
<#+
    }

    private void WriteEntity(EntitySpace.Entity entity)
    {#>

        public partial class <#= entity.Name #>DeltaNotification : DeltaNotification<<#= entity.Name #>DeltaMessage>
        {
            public <#= entity.IdPropertyType #> EntityId { get; set; }
        }
<#+
    }
#>