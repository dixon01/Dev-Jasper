<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ ImportProject Processor="ImportProjectDirectiveProcessor" Projects="..\..\T4Templating\Center.Common.T4Templating.csproj" UnloadGenerationAppDomain="true" #>
<#@ Compile Processor="CompileDirectiveProcessor" Items="..\ServiceModelExtensions.cs" Assemblies="System.Core.dll;System.Data.Entity.Design.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Gorba.Center.Common.T4Templating" #>
<#@ import namespace="Gorba.Center.Common.ServiceModel" #>
<#@ output extension=".generated.cs" #>
<#@ include file="PropertyReferenceFilters.Entity.ttinclude" #>
<#@ include file="PropertyReferenceFilters.Partition.ttinclude" #>
<#@ include file="PropertyReferenceFilters.Using.ttinclude" #>
<#
    var path =
        this.Host.ResolvePath(@"..\EntitySpace.xml");
    var entitySpace = EntitySpace.Load(path);
    var partitions = entitySpace.Partitions.OrderBy(partition => partition.Name).OrderBy(partition => partition.Name);
    var entities = partitions.SelectMany(partition => partition.Entities).OrderBy(entity => entity.Name).ToList();
    foreach (var entity in entities)
    {
        this.entityKeyTypes.Add(entity.Name, entity.IdPropertyType);
        this.entityKeyTypes.Add(entity.Partition.Name + "." + entity.Name, entity.IdPropertyType);
    }
#>
namespace Gorba.Center.Common.ServiceModel.Filters
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;
    using System.Runtime.Serialization;

    using Filters;
<#
    foreach (var partition in partitions)
    {
        this.WritePartition(partition);
    }
#>
}<#+
    private readonly Dictionary<string, string> entityKeyTypes = new Dictionary<string, string>();
#>