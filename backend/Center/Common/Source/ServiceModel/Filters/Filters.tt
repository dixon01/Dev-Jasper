<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ ImportProject Processor="ImportProjectDirectiveProcessor" Projects="..\..\T4Templating\Center.Common.T4Templating.csproj" UnloadGenerationAppDomain="true" #>
<#@ Compile Processor="CompileDirectiveProcessor" Items="..\ServiceModelExtensions.cs" Assemblies="System.Core.dll;System.Data.Entity.Design.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Gorba.Center.Common.T4Templating" #>
<#@ import namespace="Gorba.Center.Common.ServiceModel" #>
<#@ output extension=".generated.cs" #>
<#
    var path =
        this.Host.ResolvePath(@"..\EntitySpace.xml");
    var entitySpace = EntitySpace.Load(path);
    var partitions = entitySpace.Partitions.OrderBy(partition => partition.Name).OrderBy(partition => partition.Name);
#>
namespace Gorba.Center.Common.ServiceModel.Filters
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Linq;
    using System.Runtime.Serialization;

    using Filters;
<#
    foreach (var partition in partitions)
    {
        this.WritePartition(partition);
    }
#>
}
<#+
    private void WritePartition(EntitySpace.Partition partition)
    {
        var entities = partition.Entities.OrderBy(entity => entity.Name).ToList();
#>

    namespace <#= partition.Name #>
    {
        using Gorba.Center.Common.ServiceModel.<#= partition.Name #>;
<#+
        foreach (var entity in entities)
        {
            this.WriteEntity(entity);
        }
#>
    }
<#+
    }
    
    private void WriteEntity(EntitySpace.Entity entity)
    {
        var valueProperties = entity.Properties
                .OfType<EntitySpace.Property>()
                .Where(property => property.PropertyType == EntitySpace.PropertyType.Primitive && !property.IsXmlSerialized)
                .OrderBy(property => property.Name)
                .ToList();
                
        var xmlProperties = entity.Properties
                .OfType<EntitySpace.Property>()
                .Where(property => property.PropertyType == EntitySpace.PropertyType.Primitive && property.IsXmlSerialized)
                .OrderBy(property => property.Name)
                .ToList();
                
        var enumProperties = entity.Properties
                .OfType<EntitySpace.Property>()
                .Where(property => property.PropertyType == EntitySpace.PropertyType.Enumeration)
                .OrderBy(property => property.Name)
                .ToList();

        var referenceProperties = entity.Properties
                .OfType<EntitySpace.Property>()
                .Where(property => property.PropertyType == EntitySpace.PropertyType.Reference)
                .OrderBy(property => property.Name)
                .ToList();

        var collectionProperties = entity.Properties
                .OfType<EntitySpace.CollectionProperty>()
                .OrderBy(property => property.Name)
                .ToList();
        var idType = entity.IdPropertyType == "int" ? "Int32" : entity.IdPropertyType;
#>

        [DataContract]
<#+
        foreach (var property in enumProperties)
        {
            this.WriteEnumKnownType(property);
        }

        foreach (var property in enumProperties.Union(valueProperties))
        {
            this.WriteValueKnownType(property);
        }
#>
        public partial class <#= entity.Name #>Filter
        {
            [DataMember]
            public IdPropertyValueFilter Id { get; set; }
<#+
        if (entity.HasChangeTracking)
        {
            #>

            [DataMember]
            public CreatedOnPropertyValueFilter CreatedOn { get; set; }

            [DataMember]
            public LastModifiedOnPropertyValueFilter LastModifiedOn { get; set; }

            [DataMember]
            public VersionPropertyValueFilter Version { get; set; }
<#+
        }

        foreach (var property in referenceProperties)
        {
            this.WriteReferenceProperty(property);
        }

        foreach (var property in collectionProperties)
        {
            this.WriteCollectionProperty(property);
        }

        foreach (var property in valueProperties.Union(enumProperties))
        {
            this.WriteProperty(property);
        }

        foreach (var property in xmlProperties)
        {
            this.WriteXmlProperty(property);
        }
#>

            public static <#= entity.Name #>Filter Create()
            {
                return new <#= entity.Name #>Filter();
            }
<#+

        foreach (var property in valueProperties)
        {
            this.WritePropertyFilter(property);
        }

        foreach (var property in enumProperties)
        {
            this.WritePropertyEnumFilter(property);
        }
#>

            [DataContract]
            public class IdPropertyValueFilter : <#= idType #>PropertyValueFilter
            {
            }
<#+
        if (entity.HasChangeTracking)
        {
            #>

            [DataContract]
            public class CreatedOnPropertyValueFilter : DateTimePropertyValueFilter
            {
            }

            [DataContract]
            public class LastModifiedOnPropertyValueFilter : NullableDateTimePropertyValueFilter
            {
            }

            [DataContract]
            public class VersionPropertyValueFilter : Int32PropertyValueFilter
            {
            }
<#+
        }
        #>

        }
<#+
    }

    private void WriteValueKnownType(EntitySpace.Property property)
    {#>
        [KnownType(typeof(<#= property.Name #>PropertyValueFilter))]
<#+
    }

    private void WriteEnumKnownType(EntitySpace.Property property)
    {#>
        [KnownType(typeof(<#= property.Type #>))] //here
<#+
    }

    private void WriteReferenceProperty(EntitySpace.Property property)
    {#>

            [DataMember]
            public <#= property.Type #>Filter <#= property.Name #> { get; set; }
<#+
    }

    private void WriteCollectionProperty(EntitySpace.CollectionProperty property)
    {#>

            [DataMember]
            public <#= property.ItemType #>Filter <#= property.Name #> { get; set; }
<#+
    }

    private void WriteProperty(EntitySpace.Property property)
    {#>

            [DataMember]
            public <#= property.Name #>PropertyValueFilter <#= property.Name #> { get; set; }
<#+
    }

    private void WriteXmlProperty(EntitySpace.Property property)
    {#>

            [DataMember]
            public bool Include<#= property.Name #> { get; set; }
<#+
    }
    
    private void WritePropertyFilter(EntitySpace.Property property)
    {
#>

            [DataContract]
            public class <#= property.Name #>PropertyValueFilter : <#= property.Type.GetPropertyValueName() #>PropertyValueFilter
            {
            }
<#+
    }

    private void WritePropertyEnumFilter(EntitySpace.Property property)
    {#>

            [DataContract]
            public class <#= property.Name #>PropertyValueFilter : EnumPropertyValueFilter
            {
            }
<#+
    }
#>