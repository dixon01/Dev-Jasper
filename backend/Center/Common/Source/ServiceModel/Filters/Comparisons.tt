<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ ImportProject Processor="ImportProjectDirectiveProcessor" Projects="..\..\T4Templating\Center.Common.T4Templating.csproj" UnloadGenerationAppDomain="true" #>
<#@ Compile Processor="CompileDirectiveProcessor" Items="..\ServiceModelExtensions.cs;PropertyValueFilterDefinition.ttcode.cs" Assemblies="System.Core.dll;System.Data.Entity.Design.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Gorba.Center.Common.T4Templating" #>
<#@ import namespace="Gorba.Center.Common.ServiceModel" #>
<#@ import namespace="Gorba.Center.Common.ServiceModel.Filters" #>
<#@ output extension=".generated.cs" #>
<#@ include file="FilterDefinitions.ttinclude" #>
<#
    var filters = GetFilterDefinitions();
#>
namespace Gorba.Center.Common.ServiceModel.Filters
{
    using System;
    using System.Runtime.Serialization;
<#
    foreach (var filter in filters)
    {
        this.WriteComparison(filter);
    }
#>
}
<#+
    private void WriteComparison(PropertyValueFilterDefinition filter)
    {#>

    /// <summary>
    /// Defines the comparison operator for <#= filter.Type #>.
    /// </summary>
    [DataContract]
    public enum <#= filter.Name #>Comparison
    {
        /// <summary>
        /// The values are exactly the same.
        /// </summary>
        [EnumMember]
        ExactMatch = 0,

        /// <summary>
        /// The values are different.
        /// </summary>
        [EnumMember]
        Different = 1<#+
    filter.AdditionalComparisonOperators
        .Select((o, index) => new { Operator = o, Index = index + 2 })
        .ToList()
        .ForEach(o => this.WriteComparison(o.Operator, o.Index));
#>

    }
<#+
    }

    private void WriteComparison(PropertyValueFilterDefinition.AdditionalComparisonOperator comparisonOperator, int index)
    {#>,

        [EnumMember]
        <#= comparisonOperator #> = <#= index #><#+
    }
#>