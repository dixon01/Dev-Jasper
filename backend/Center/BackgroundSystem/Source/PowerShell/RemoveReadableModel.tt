<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ ImportProject Processor="ImportProjectDirectiveProcessor" Projects="..\..\..\Common\Source\T4Templating\Center.Common.T4Templating.csproj" UnloadGenerationAppDomain="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Gorba.Center.Common.T4Templating" #>
<#@ output extension=".generated.cs" #>
<#
    var path =
        this.Host.ResolvePath(@"..\..\..\Common\Source\ServiceModel\EntitySpace.xml");
    var entitySpace = EntitySpace.Load(path);
    var partitions = entitySpace.Partitions.Where(p => p.Entities.Any(e => e.HasChangeTracking));
    var entities =
        entitySpace.Partitions
        .SelectMany(partition => partition.Entities.Where(entity => entity.HasChangeTracking))
        .ToList();
#>
namespace Gorba.Center.BackgroundSystem.PowerShell
{
    using System;
    using System.Management.Automation;
    using System.Threading.Tasks;

    using Gorba.Center.Common.Client.ChangeTracking;

<#
    foreach (var partition in partitions)
    {#>
    using Gorba.Center.Common.Client.ChangeTracking.<#= partition.Name #>;
<# 
    }
	#>

<#
    foreach (var partition in partitions)
    {#>
    using Gorba.Center.Common.ServiceModel.ChangeTracking.<#= partition.Name #>;
<# 
    }
	#>

<#
    foreach (var partition in partitions)
    {#>
    using Gorba.Center.Common.ServiceModel.Filters.<#= partition.Name #>;
<# 
    }
	#>

    using NLog;

<#
    foreach (var entity in entities)
    {
        this.WriteCmdlet(entity);
    }
#>
	
}
<#+

    private void WriteCmdlet(EntitySpace.Entity entity)
    {
        #>
	[Cmdlet(VerbsCommon.Remove, "<#= entity.Name #>ReadableModel")]
	public class Remove<#= entity.Name #>ReadableModel : AsyncCmdlet
	{
        private static readonly Logger Logger = LogManager.GetCurrentClassLogger();

        [Parameter(Mandatory = true)]
        public <#= entity.Name #>ChangeTrackingManager ChangeTrackingManager { get; set; }

		[Parameter]
		public <#= entity.Name #>ReadableModel InputObject { get; set; }

		[Parameter]
		public SwitchParameter LoadReferenceProperties { get; set; }

        protected override async Task ProcessRecordAsync()
        {
            try
            {
				await this.ChangeTrackingManager.DeleteAsync(this.InputObject);
            }
            catch (Exception exception)
            {
                Logger.Error(exception, "Error while bootstrapping change tracking");
                this.WriteError(
                    new ErrorRecord(
                        exception,
                        "RemoveUserReadableModel",
                        ErrorCategory.ReadError,
                        this.ChangeTrackingManager));
                throw new Exception(exception.StackTrace);
            }
        }
	}
<#+
    }
#>