// <auto-generated />

namespace Gorba.Center.BackgroundSystem.Spikes.ConsoleApplication
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Net;
    using System.Reflection;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Xml.Serialization;

    internal class TableHelper : RestHelper
    {
        // Constructor.

        public TableHelper(string storageAccount, string storageKey, bool isLocal = false)
            : base(
                isLocal
                    ? "http://127.0.0.1:10002/" + storageAccount + "/"
                    : "http://" + storageAccount + ".table.core.windows.net/",
                storageAccount,
                storageKey)
        {
            this.IsTableStorage = true;
        }


        // List tables.
        // Return true on success, false if not found, throw exception on error.

        public List<Table> ListTables()
        {
            return Retry(delegate()
            {
                HttpWebResponse response;
                var tables = new List<Table>();

                try
                {
                    response = this.CreateRestRequest("GET", "Tables").GetResponse() as HttpWebResponse;

                    if ((int)response.StatusCode == 200)
                    {
                        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                        {
                            var serializer = new XmlSerializer(typeof(Feed));
                            var feed = (Feed)serializer.Deserialize(reader);
                            foreach (var entry in feed.Entries)
                            {
                                tables.Add(Table.Create(entry));
                            }

                            //XNamespace ns = "http://www.w3.org/2005/Atom";
                            //XNamespace d = "http://schemas.microsoft.com/ado/2007/08/dataservices";

                            //XElement x = XElement.Parse(result, LoadOptions.SetBaseUri);

                            //foreach (XElement tableName in x.Descendants(d + "TableName"))
                            //{
                            //    tables.Add(tableName.Value);
                            //}
                        }
                    }

                    response.Close();

                    return tables;
                }
                catch (WebException ex)
                {
                    if (ex.Status == WebExceptionStatus.ProtocolError &&
                        ex.Response != null &&
                        (int)(ex.Response as HttpWebResponse).StatusCode == 404)
                        return null;

                    throw;
                }
            });
        }

        // Create a table.
        // Return true on success, false if already exists / unable to create, throw exception on error.

        public bool CreateTable(string tableName)
        {
            return Retry<bool>(delegate()
            {
                HttpWebResponse response;

                try
                {
                    string now = DateTime.UtcNow.ToString("o");

                    string requestBody = String.Format("<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>" +
                                          "<entry xmlns:d=\"http://schemas.microsoft.com/ado/2007/08/dataservices\"" +
                                          "       xmlns:m=\"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\"" +
                                          "       xmlns=\"http://www.w3.org/2005/Atom\"> " +
                                          "  <title /> " +
                                          "  <updated>" + now + "</updated> " +
                                          "  <author>" +
                                          "    <name/> " +
                                          "  </author> " +
                                          "  <id/> " +
                                          "  <content type=\"application/xml\">" +
                                          "    <m:properties>" +
                                          "      <d:TableName>{0}</d:TableName>" +
                                          "    </m:properties>" +
                                          "  </content> " +
                                          "</entry>",
                                          tableName);

                    response = this.CreateRestRequest("POST", "Tables", requestBody).GetResponse() as HttpWebResponse;
                    response.Close();

                    return true;
                }
                catch (WebException ex)
                {
                    if (ex.Status == WebExceptionStatus.ProtocolError &&
                        ex.Response != null &&
                        (int)(ex.Response as HttpWebResponse).StatusCode == 409)
                        return false;

                    throw;
                }
            });
        }


        // Delete table.
        // Return true on success, false if not found, throw exception on error.

        public bool DeleteTable(string tableName)
        {
            return Retry<bool>(delegate()
            {
                HttpWebResponse response;

                try
                {
                    response = this.CreateRestRequest("DELETE", "Tables('" + tableName + "')").GetResponse() as HttpWebResponse;
                    response.Close();

                    return true;
                }
                catch (WebException ex)
                {
                    if (ex.Status == WebExceptionStatus.ProtocolError &&
                        ex.Response != null &&
                        (int)(ex.Response as HttpWebResponse).StatusCode == 409)
                        return false;

                    throw;
                }
            });
        }


        // Insert entity.
        // Return true on success, false if not found, throw exception on error.

        public bool InsertEntity(string tableName, string partitionKey, string rowKey, object obj)
        {
            return Retry<bool>(delegate()
            {
                HttpWebResponse response;

                try
                {
                    // Create properties list. Use reflection to retrieve properties from the object.

                    StringBuilder properties = new StringBuilder();
                    properties.Append(string.Format("<d:{0}>{1}</d:{0}>\n", "PartitionKey", partitionKey));
                    properties.Append(string.Format("<d:{0}>{1}</d:{0}>\n", "RowKey", rowKey));

                    Type t = obj.GetType();
                    PropertyInfo[] pi = t.GetProperties();
                    MethodInfo mi;
                    foreach (PropertyInfo p in pi)
                    {
                        try
                        {
                            mi = p.GetGetMethod();
                            properties.Append(string.Format("<d:{0}>{1}</d:{0}>\n", p.Name, mi.Invoke(obj, null).ToString()));
                        }
                        catch (NullReferenceException)
                        {
                        }
                    }

                    string requestBody = String.Format("<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>" +
                                          "<entry xmlns:d=\"http://schemas.microsoft.com/ado/2007/08/dataservices\"" +
                                          "       xmlns:m=\"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\"" +
                                          "       xmlns=\"http://www.w3.org/2005/Atom\"> " +
                                          "  <title /> " +
                                          "  <updated>2009-03-18T11:48:34.9840639-07:00</updated> " +
                                          "  <author>" +
                                          "    <name/> " +
                                          "  </author> " +
                                          "  <id/> " +
                                          "  <content type=\"application/xml\">" +
                                          "  <m:properties>" +
                                          "{1}" +
                                          "  </m:properties>" +
                                          "  </content> " +
                                          "</entry>",
                                          tableName,
                                          properties);

                    response = this.CreateRestRequest("POST", tableName, requestBody).GetResponse() as HttpWebResponse;
                    response.Close();

                    return true;
                }
                catch (WebException ex)
                {
                    if (ex.Status == WebExceptionStatus.ProtocolError &&
                        ex.Response != null &&
                        (int)(ex.Response as HttpWebResponse).StatusCode == 409)
                        return false;

                    throw;
                }
            });
        }


        // Retrieve an entity. Returns entity XML.
        // Return true on success, false if not found, throw exception on error.

        public EntityDetails GetEntity(string tableName, string partitionKey, string rowKey)
        {
            return Retry<EntityDetails>(delegate()
            {
                HttpWebRequest request;
                HttpWebResponse response;

                EntityDetails entityXml = null;

                try
                {
                    string resource = String.Format(tableName + "(PartitionKey='{0}',RowKey='{1}')", partitionKey, rowKey);

                    SortedList<string, string> headers = new SortedList<string, string>();
                    headers.Add("If-Match", "*");

                    request = this.CreateRestRequest("GET", resource, null, headers);

                    request.Accept = "application/atom+xml";

                    response = request.GetResponse() as HttpWebResponse;

                    if ((int)response.StatusCode == 200)
                    {
                        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                        {
                            //var result = reader.ReadToEnd();
                            var serializer = new XmlSerializer(typeof(FeedEntry));
                            var feed = (FeedEntry)serializer.Deserialize(reader);
                            entityXml = EntityDetails.Create(feed);
                        }
                    }

                    response.Close();
                            return entityXml;
                }
                catch (WebException ex)
                {
                    if (ex.Status == WebExceptionStatus.ProtocolError &&
                        ex.Response != null &&
                        (int)(ex.Response as HttpWebResponse).StatusCode == 409)
                        return null;

                    throw;
                }
            });
        }


        // Query entities. Returned entity list XML matching query filter.
        // Return true on success, false if not found, throw exception on error.

        public List<Entity> QueryEntities(string tableName, string filter)
        {
            return Retry<List<Entity>>(delegate()
            {
                HttpWebRequest request;
                HttpWebResponse response;

                string entityXml = null;

                try
                {
                    string resource = String.Format(tableName + "()?$filter=" + Uri.EscapeDataString(filter));

                    request = this.CreateRestRequest("GET", resource, null, null);
                    request.Accept = "application/atom+xml,application/xml";

                    response = request.GetResponse() as HttpWebResponse;
                    var entities = new List<Entity>();
                    using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                    {
                        var serializer = new XmlSerializer(typeof(Feed));
                        var feed = (Feed)serializer.Deserialize(reader);
                        foreach (var entry in feed.Entries)
                        {
                            var entity = Entity.Create(entry);
                            if (entity != null)
                            {
                                entities.Add(entity);
                            }
                        }

                        //XNamespace ns = "http://www.w3.org/2005/Atom";
                        //XNamespace d = "http://schemas.microsoft.com/ado/2007/08/dataservices";

                        //XElement x = XElement.Parse(result, LoadOptions.SetBaseUri);

                        //foreach (XElement tableName in x.Descendants(d + "TableName"))
                        //{
                        //    tables.Add(tableName.Value);
                        //}
                    }

                    //if ((int)response.StatusCode == 200)
                    //{
                    //    using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                    //    {
                    //        string result = reader.ReadToEnd();

                    //        XNamespace ns = "http://www.w3.org/2005/Atom";
                    //        XNamespace d = "http://schemas.microsoft.com/ado/2007/08/dataservices";

                    //        XElement entry = XElement.Parse(result);

                    //        entityXml = entry.ToString();
                    //    }
                    //}

                    response.Close();

                    return entities;
                }
                catch (WebException ex)
                {
                    if (ex.Status == WebExceptionStatus.ProtocolError &&
                        ex.Response != null &&
                        (int)(ex.Response as HttpWebResponse).StatusCode == 409)
                        return null;

                    throw;
                }
            });
        }


        // Replace Update entity. Completely replace previous entity with new entity.
        // Return true on success, false if not found, throw exception on error

        public bool ReplaceUpdateEntity(string tableName, string partitionKey, string rowKey, object obj)
        {
            return Retry<bool>(delegate()
            {
                HttpWebRequest request;
                HttpWebResponse response;

                try
                {
                    string now = DateTime.UtcNow.ToString("o", System.Globalization.CultureInfo.InvariantCulture);

                    // Create properties list. Use reflection to retrieve properties from the object.

                    StringBuilder properties = new StringBuilder();
                    properties.Append(string.Format("<d:{0}>{1}</d:{0}>\n", "PartitionKey", partitionKey));
                    properties.Append(string.Format("<d:{0}>{1}</d:{0}>\n", "RowKey", rowKey));
                    properties.Append(string.Format("<d:{0} m:type=\"Edm.DateTime\">{1}</d:{0}>\n", "Timestamp", now));

                    Type t = obj.GetType();
                    PropertyInfo[] pi = t.GetProperties();
                    MethodInfo mi;
                    foreach (PropertyInfo p in pi)
                    {
                        try
                        {
                            mi = p.GetGetMethod();
                            properties.Append(string.Format("<d:{0}>{1}</d:{0}>\n", p.Name, mi.Invoke(obj, null).ToString()));
                        }
                        catch (NullReferenceException)
                        {
                        }
                    }

                    string id = String.Format("http://{0}.table.core.windows.net/{1}(PartitionKey='{2}',RowKey='{3}')", this.StorageAccount, tableName, partitionKey, rowKey);

                    string requestBody = String.Format("<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>" +
                                          "<entry xmlns:d=\"http://schemas.microsoft.com/ado/2007/08/dataservices\"" +
                                          "       xmlns:m=\"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\"" +
                                          "       xmlns=\"http://www.w3.org/2005/Atom\"> " +
                                          "  <title /> " +
                                          "  <updated>{0}</updated> " +
                                          "  <author>" +
                                          "    <name/> " +
                                          "  </author> " +
                                          "  <id>{1}</id> " +
                                          "  <content type=\"application/xml\">" +
                                          "  <m:properties>" +
                                          "{2}" +
                                          "  </m:properties>" +
                                          "  </content> " +
                                          "</entry>",
                                          now,
                                          id,
                                          properties);

                    string resource = String.Format(tableName + "(PartitionKey='{0}',RowKey='{1}')", partitionKey, rowKey);

                    SortedList<string, string> headers = new SortedList<string, string>();
                    headers.Add("If-Match", "*");

                    request = this.CreateRestRequest("PUT", resource, requestBody, headers);

                    request.Accept = "application/atom+xml";

                    response = request.GetResponse() as HttpWebResponse;
                    response.Close();

                    return true;
                }
                catch (WebException ex)
                {
                    if (ex.Status == WebExceptionStatus.ProtocolError &&
                        ex.Response != null &&
                        (int)(ex.Response as HttpWebResponse).StatusCode == 409)
                        return false;

                    throw;
                }
            });
        }


        // Merge update an entity (preserve previous properties not overwritten).
        // Return true on success, false if not found, throw exception on error.

        public bool MergeUpdateEntity(string tableName, string partitionKey, string rowKey, object obj)
        {
            return Retry(
                delegate
                    {
                        HttpWebRequest request;

                        try
                        {
                            string now = DateTime.UtcNow.ToString(
                                "o",
                                System.Globalization.CultureInfo.InvariantCulture);

                            // Create properties list. Use reflection to retrieve properties from the object.

                            var properties = new StringBuilder();
                            properties.Append(string.Format("<d:{0}>{1}</d:{0}>\n", "PartitionKey", partitionKey));
                            properties.Append(string.Format("<d:{0}>{1}</d:{0}>\n", "RowKey", rowKey));
                            properties.Append(
                                string.Format("<d:{0} m:type=\"Edm.DateTime\">{1}</d:{0}>\n", "Timestamp", now));

                            Type t = obj.GetType();
                            PropertyInfo[] pi = t.GetProperties();
                            MethodInfo mi;
                            foreach (PropertyInfo p in pi)
                            {
                                try
                                {
                                    mi = p.GetGetMethod();
                                    properties.Append(
                                        string.Format("<d:{0}>{1}</d:{0}>\n", p.Name, mi.Invoke(obj, null).ToString()));
                                }
                                catch (NullReferenceException)
                                {
                                }
                            }

                            var id =
                                String.Format(
                                    "http://{0}.table.core.windows.net/{1}(PartitionKey='{2}',RowKey='{3}')",
                                    this.StorageAccount,
                                    tableName,
                                    partitionKey,
                                    rowKey);

                            var requestBody =
                                String.Format(
                                    "<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>"
                                    + "<entry xmlns:d=\"http://schemas.microsoft.com/ado/2007/08/dataservices\""
                                    + "       xmlns:m=\"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\""
                                    + "       xmlns=\"http://www.w3.org/2005/Atom\"> " + "  <title /> "
                                    + "  <updated>{0}</updated> " + "  <author>" + "    <name/> " + "  </author> "
                                    + "  <id>{1}</id> " + "  <content type=\"application/xml\">" + "  <m:properties>"
                                    + "{2}" + "  </m:properties>" + "  </content> " + "</entry>",
                                    now,
                                    id,
                                    properties);

                            var resource = String.Format(
                                tableName + "(PartitionKey='{0}',RowKey='{1}')",
                                partitionKey,
                                rowKey);

                            var headers = new SortedList<string, string>();
                            headers.Add("If-Match", "*");

                            request = this.CreateRestRequest("MERGE", resource, requestBody, headers);

                            request.Accept = "application/atom+xml";

                            var response = (HttpWebResponse)request.GetResponse();
                            response.Close();

                            return true;
                        }
                        catch (WebException ex)
                        {
                            if (ex.Status == WebExceptionStatus.ProtocolError && ex.Response != null
                                && (int)((HttpWebResponse)ex.Response).StatusCode == 409) return false;

                            throw;
                        }
                    });
        }


        // Delete entity.
        // Return true on success, false if not found, throw exception on error.

        public bool DeleteEntity(string tableName, string partitionKey, string rowKey)
        {
            return Retry(
                delegate
                    {
                        try
                        {
                            var resource = String.Format(
                                tableName + "(PartitionKey='{0}',RowKey='{1}')",
                                partitionKey,
                                rowKey);

                            var headers = new SortedList<string, string>();
                            headers.Add("If-Match", "*");

                            var request = this.CreateRestRequest("DELETE", resource, null, headers);

                            var response = (HttpWebResponse)request.GetResponse();
                            response.Close();

                            return true;
                        }
                        catch (WebException ex)
                        {
                            if (ex.Status == WebExceptionStatus.ProtocolError && ex.Response != null
                                && (int)((HttpWebResponse)ex.Response).StatusCode == 409) return false;

                            throw;
                        }
                    });
        }

    }

    /// <summary>
    /// Defines the information about an entity table.
    /// </summary>
    internal class Table
    {
        private static readonly Regex TableRegex = new Regex(@"/Tables\('(?<TableName>[\w]*)'\)");

        private Table(string uri)
        {
            this.Uri = new Uri(uri);
        }

        /// <summary>
        /// Gets the name.
        /// </summary>
        public string Name { get; private set; }

        /// <summary>
        /// Gets the uri.
        /// </summary>
        public Uri Uri { get; private set; }

        /// <summary>
        /// Creates a new table.
        /// </summary>
        /// <param name="entry">
        /// The entry.
        /// </param>
        /// <returns>
        /// The <see cref="Table"/>.
        /// </returns>
        public static Table Create(FeedEntry entry)
        {
            var table = new Table(entry.Id);
            var match = TableRegex.Match(table.Uri.LocalPath);
            if (!match.Success)
            {
                throw new Exception("Id not valid form");
            }

            table.Name = match.Groups["TableName"].Value;
            return table;
        }
    }

    /// <summary>
    /// Defines the information about an entity table.
    /// </summary>
    internal class Entity
    {
        private static readonly Regex TableRegex = new Regex(@"/(?<TableName>[\w]*)\(PartitionKey='(?<PartitionKey>[\w]*)',RowKey='(?<RowKey>[\w]*)'\)");

        private Entity(string uri)
        {
            this.Uri = new Uri(uri);
        }

        /// <summary>
        /// Gets the partition key.
        /// </summary>
        public string PartitionKey { get; private set; }

        /// <summary>
        /// Gets the row key.
        /// </summary>
        public string RowKey { get; private set; }

        /// <summary>
        /// Gets the uri.
        /// </summary>
        public Uri Uri { get; private set; }

        /// <summary>
        /// Creates a new table.
        /// </summary>
        /// <param name="entry">
        /// The entry.
        /// </param>
        /// <returns>
        /// The <see cref="Table"/>.
        /// </returns>
        public static Entity Create(FeedEntry entry)
        {
            var table = new Entity(entry.Id);
            var match = TableRegex.Match(table.Uri.LocalPath);
            if (!match.Success)
            {
                return null;
            }

            table.PartitionKey = match.Groups["PartitionKey"].Value;
            table.RowKey = match.Groups["RowKey"].Value;
            return table;
        }
    }

    internal class EntityDetails
    {
        private FeedEntryContent properties;

        private static readonly Regex TableRegex = new Regex(@"/(?<TableName>[\w]*)\(PartitionKey='(?<PartitionKey>[\w]*)',RowKey='(?<RowKey>[\w]*)'\)");

        private EntityDetails(string uri)
        {
            this.Uri = new Uri(uri);
        }

        public string this[string name]
        {
            get
            {
                return this.GetValue<string>(name);
            }
        }

        public T GetValue<T>(string name)
        {
            foreach (var property in this.properties.Properties.Values)
            {
                if (string.Equals(property.LocalName, name, StringComparison.InvariantCulture))
                {
                    var converter = TypeDescriptor.GetConverter(typeof(T));
                    return (T)converter.ConvertFromString(property.InnerText);
                }
            }

            throw new Exception("Property not found");
        }

        /// <summary>
        /// Gets the partition key.
        /// </summary>
        public string PartitionKey { get; private set; }

        /// <summary>
        /// Gets the row key.
        /// </summary>
        public string RowKey { get; private set; }

        /// <summary>
        /// Gets the uri.
        /// </summary>
        public Uri Uri { get; private set; }

        /// <summary>
        /// Creates a new <see cref="EntityDetails"/>.
        /// </summary>
        /// <param name="entry">
        /// The entry.
        /// </param>
        /// <returns>
        /// The <see cref="Table"/>.
        /// </returns>
        public static EntityDetails Create(FeedEntry entry)
        {
            var table = new EntityDetails(entry.Id);
            var match = TableRegex.Match(table.Uri.LocalPath);
            if (!match.Success)
            {
                throw new Exception("Id not valid form");
            }

            table.PartitionKey = match.Groups["PartitionKey"].Value;
            table.RowKey = match.Groups["RowKey"].Value;
            table.properties = entry.Content;
            return table;
        }
    }
}