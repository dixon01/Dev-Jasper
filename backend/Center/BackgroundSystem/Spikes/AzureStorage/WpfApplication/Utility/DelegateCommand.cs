// <auto-generated />
// --------------------------------------------------------------------------------------------------------------------
// <copyright file="DelegateCommand.cs" company="Gorba AG">
//   Copyright © 2011-2015 Gorba AG. All rights reserved.
// </copyright>
// <summary>
//   Defines the DelegateCommand type.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace Gorba.Center.BackgroundSystem.Spikes.AzureStorage.WpfApplication.Utility
{
    using System;
    using System.Threading.Tasks;
    using System.Windows.Input;

    public class DelegateCommand : DelegateCommand<object>
    {
        public DelegateCommand(Action executeMethod)
            : base(o => executeMethod())
        {
        }

        public DelegateCommand(Action executeMethod, Func<bool> canExecuteMethod)
            : base(o => executeMethod(), o => canExecuteMethod())
        {
        }
    }

    public interface IAsyncCommand : IAsyncCommand<object>
    {
    }

    public interface IAsyncCommand<in T> : IRaiseCanExecuteChanged
    {
        Task ExecuteAsync(T obj);

        ICommand Command { get; }
    }

    public interface IRaiseCanExecuteChanged
    {
        void RaiseCanExecuteChanged();
    }

    // And an extension method to make it easy to raise changed events
    public static class CommandExtensions
    {
        public static void RaiseCanExecuteChanged(this ICommand command)
        {
            var canExecuteChanged = command as IRaiseCanExecuteChanged;

            if (canExecuteChanged != null) canExecuteChanged.RaiseCanExecuteChanged();
        }
    }

    public class AwaitableDelegateCommand : AwaitableDelegateCommand<object>, IAsyncCommand
    {
        public AwaitableDelegateCommand(Func<Task> executeMethod)
            : base(o => executeMethod())
        {
        }

        public AwaitableDelegateCommand(Func<Task> executeMethod, Func<bool> canExecuteMethod)
            : base(o => executeMethod(), o => canExecuteMethod())
        {
        }
    }

    public class ExtendedAwaitableDelegateCommand : AwaitableDelegateCommand
    {
        public ExtendedAwaitableDelegateCommand(Func<Task> executeMethod)
            : base(executeMethod)
        {
        }

        public ExtendedAwaitableDelegateCommand(Func<Task> executeMethod, Func<bool> canExecuteMethod)
            : base(executeMethod, canExecuteMethod)
        {
        }
    }

    public class AwaitableDelegateCommand<T> : IAsyncCommand<T>, ICommand
    {
        private readonly Func<T, Task> _executeMethod;

        private readonly DelegateCommand<T> _underlyingCommand;

        private bool _isExecuting;

        public AwaitableDelegateCommand(Func<T, Task> executeMethod)
            : this(executeMethod, _ => true)
        {
        }

        public AwaitableDelegateCommand(Func<T, Task> executeMethod, Func<T, bool> canExecuteMethod)
        {
            this._executeMethod = executeMethod;
            this._underlyingCommand = new DelegateCommand<T>(x => { }, canExecuteMethod);
        }

        public async Task ExecuteAsync(T obj)
        {
            try
            {
                this._isExecuting = true;
                this.RaiseCanExecuteChanged();
                await this._executeMethod(obj);
            }
            finally
            {
                this._isExecuting = false;
                this.RaiseCanExecuteChanged();
            }
        }

        public ICommand Command
        {
            get
            {
                return this;
            }
        }

        public bool CanExecute(object parameter)
        {
            return !this._isExecuting && this._underlyingCommand.CanExecute((T)parameter);
        }

        public event EventHandler CanExecuteChanged
        {
            add
            {
                this._underlyingCommand.CanExecuteChanged += value;
            }
            remove
            {
                this._underlyingCommand.CanExecuteChanged -= value;
            }
        }

        public async void Execute(object parameter)
        {
            await this.ExecuteAsync((T)parameter);
        }

        public void RaiseCanExecuteChanged()
        {
            this._underlyingCommand.RaiseCanExecuteChanged();
        }
    }

    /// <summary>
    /// A command that calls the specified delegate when the command is executed.
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class DelegateCommand<T> : ICommand
    {
        private readonly Func<T, bool> _canExecuteMethod;

        private readonly Action<T> _executeMethod;

        private bool _isExecuting;

        public DelegateCommand(Action<T> executeMethod)
            : this(executeMethod, null)
        {
        }

        public DelegateCommand(Action<T> executeMethod, Func<T, bool> canExecuteMethod)
        {
            if ((executeMethod == null) && (canExecuteMethod == null))
            {
                throw new ArgumentNullException("executeMethod", @"Execute Method cannot be null");
            }
            this._executeMethod = executeMethod;
            this._canExecuteMethod = canExecuteMethod;
        }

        public event EventHandler CanExecuteChanged
        {
            add
            {
                CommandManager.RequerySuggested += value;
            }
            remove
            {
                CommandManager.RequerySuggested -= value;
            }
        }

        public void RaiseCanExecuteChanged()
        {
            CommandManager.InvalidateRequerySuggested();
        }

        bool ICommand.CanExecute(object parameter)
        {
            return !this._isExecuting && this.CanExecute((T)parameter);
        }

        void ICommand.Execute(object parameter)
        {
            this._isExecuting = true;
            try
            {
                this.RaiseCanExecuteChanged();
                this.Execute((T)parameter);
            }
            finally
            {
                this._isExecuting = false;
                this.RaiseCanExecuteChanged();
            }
        }

        public bool CanExecute(T parameter)
        {
            if (this._canExecuteMethod == null) return true;

            return this._canExecuteMethod(parameter);
        }

        public void Execute(T parameter)
        {
            this._executeMethod(parameter);
        }
    }
}