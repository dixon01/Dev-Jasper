<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ ImportProject Processor="ImportProjectDirectiveProcessor" Projects="..\..\..\..\..\Common\Source\T4Templating\T4Templating.csproj" UnloadGenerationAppDomain="true" #>
<#@ Compile Processor="CompileDirectiveProcessor" Items="TemplateExtensions.cs" Assemblies="System.Core.dll;System.Data.Entity.Design.dll" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Gorba.Center.Common.T4Templating" #>
<#@ import namespace="Gorba.Center.BackgroundSystem.Spikes.NotificationObserver.Controller" #>
<#@ output extension=".generated.cs" #>
<#
    var path = this.Host.ResolvePath(@"..\..\..\..\..\Common\Source\ServiceModel\EntitySpace.xml");
    var entitySpace = EntitySpace.Load(path);
    var partitions = entitySpace.Partitions.OrderBy(partition => partition.Name);
    var entities = partitions.SelectMany(partition => partition.Entities).Where(entity => entity.HasChangeTracking).ToList();
#>
namespace Gorba.Center.BackgroundSystem.Spikes.NotificationObserver.Controller
{
    using System.Collections.Generic;
    using System.Threading.Tasks;

	public partial class NotificationSubscriber
	{
		private IEnumerable<string> GetPaths()
		{
<#
    foreach (var entity in entities)
    {
        #>
			yield return "<#= entity.Name.Pluralize() #>";
<#
    }
#>
		}
	}
}