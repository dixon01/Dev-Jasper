<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ ImportProject Processor="ImportProjectDirectiveProcessor" Projects="..\..\..\..\..\Common\Source\T4Templating\Center.Common.T4Templating.csproj" UnloadGenerationAppDomain="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ import namespace="Gorba.Center.Common.T4Templating" #>
<#@ output extension=".generated.cs" #>
<#
    var path = this.Host.ResolvePath(@"..\..\..\..\..\Common\Source\ServiceModel\EntitySpace.xml");
    var entitySpace = EntitySpace.Load(path);
#>
namespace Gorba.Center.Admin.Core.ViewModels.Stages
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;
    using System.Xml.Serialization;
    
    using Gorba.Center.Common.Wpf.Framework.Controllers;
    
    using Gorba.Center.Admin.Core.Controllers.Entities;
    using Gorba.Center.Admin.Core.DataViewModels;
<#
    foreach (var partition in entitySpace.Partitions)
    {
        this.WritePartition(partition);
    }
#>
}<#+
    private readonly PluralizationService pluralizer =
        PluralizationService.CreateService(System.Globalization.CultureInfo.GetCultureInfo("en-us"));

    private static string ToHumanReadable(string name)
    {
        var readable = new StringBuilder(name.Length + 1);
        var wasUpper = true;
        foreach (var c in name)
        {
            var isUpper = char.IsUpper(c);
            if (!wasUpper && isUpper)
            {
                readable.Append(' ');
            }

            readable.Append(c);
            wasUpper = isUpper;
        }

        return readable.ToString();
    }

    private void WritePartition(EntitySpace.Partition partition)
    { #>

    namespace <#= partition.Name #>
    {
        using Gorba.Center.Admin.Core.DataViewModels.<#= partition.Name #>;
        <#+
        foreach (var entity in partition.Entities.Where(entity => entity.HasChangeTracking))
        {
            this.WriteEntity(entity);
        }
        #>

    }
<#+
    }

    private void WriteEntity(EntitySpace.Entity entity)
    {
        var pluralName = this.pluralizer.Pluralize(entity.Name);
        var hasDetails = entity.Properties.OfType<EntitySpace.CollectionProperty>().Any();
        #>

        public class <#= entity.Name #>StageViewModel : EntityStageViewModelBase
        {
            private <#= entity.Name #>ReadOnlyDataViewModel selected<#= entity.Name #>;

            private IReadOnlyEntityCollection<<#= entity.Name + "ReadOnlyDataViewModel" #>> all<#= pluralName #>;

            public <#= entity.Name #>StageViewModel(ICommandRegistry commandRegistry)
                : base(commandRegistry)
            {
                this.Name = this.EntityName = "<#= entity.Name #>";
                this.PluralDisplayName = "<#= ToHumanReadable(pluralName) #>";
                this.SingularDisplayName = "<#= ToHumanReadable(entity.Name) #>";
                
                this.IsLoading = true;
            }

            public IReadOnlyEntityCollection<<#= entity.Name + "ReadOnlyDataViewModel" #>> <#= pluralName #>
            {
                get
                {
                    return this.all<#= pluralName #>;
                }

                set
                {
                    var old = this.all<#= pluralName #>;
                    if (!this.SetProperty(ref this.all<#= pluralName #>, value, () => this.<#= pluralName #>))
                    {
                        return;
                    }

                    if (old != null)
                    {
                        old.PropertyChanged -= this.AllOnPropertyChanged;
                    }

                    if (value != null)
                    {
                        value.PropertyChanged += this.AllOnPropertyChanged;
                        this.IsLoading = value.IsLoading;
                    }
                    else
                    {
                        this.IsLoading = true;
                    }

                    this.RaisePropertyChanged(() => this.Instances);
                }
            }
            
            public <#= entity.Name #>ReadOnlyDataViewModel Selected<#= entity.Name #>
            {
                get
                {
                    return this.selected<#= entity.Name #>;
                }

                set
                {
                    var model = this.<#= pluralName #>.FirstOrDefault(m => m.Equals(value));
                    if (this.SetProperty(ref this.selected<#= entity.Name #>, model, () => this.Selected<#= entity.Name #>))
                    {
                        this.RaisePropertyChanged(() => this.SelectedInstance);
                    }
                }
            }

            public override IList Instances
            {
                get
                {
                    return this.<#= pluralName #>;
                }
            }
            
            public override ReadOnlyDataViewModelBase SelectedInstance
            {
                get
                {
                    return this.Selected<#= entity.Name #>;
                }
                
                set
                {
                    this.Selected<#= entity.Name #> = (<#= entity.Name #>ReadOnlyDataViewModel)value;
                }
            }

            public override bool HasDetails
            {
                get
                {
                    return <#= hasDetails.ToString().ToLower() #>;
                }
            }

            private void AllOnPropertyChanged(object sender, PropertyChangedEventArgs e)
            {
                if (this.all<#= pluralName #> != null && e.PropertyName == "IsLoading")
                {
                    this.IsLoading = this.all<#= pluralName #>.IsLoading;
                }
            }
        }
        <#+
    }
#>