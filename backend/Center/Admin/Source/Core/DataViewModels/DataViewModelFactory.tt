<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ ImportProject Processor="ImportProjectDirectiveProcessor" Projects="..\..\..\..\Common\Source\T4Templating\Center.Common.T4Templating.csproj" UnloadGenerationAppDomain="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Gorba.Center.Common.T4Templating" #>
<#@ output extension=".generated.cs" #>
<#
    var path = this.Host.ResolvePath(@"..\..\..\..\Common\Source\ServiceModel\EntitySpace.xml");
    var entitySpace = EntitySpace.Load(path);
    var userDefinedPropertiesEnabledEntityNames =
        entitySpace.Partitions.Single(p => p.Name == "Meta")
            .Enums.Single(e => e.Name == "UserDefinedPropertyEnabledEntity").Members.Select(m => m.Name);
#>
namespace Gorba.Center.Admin.Core.DataViewModels
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Collections.Specialized;
    using System.ComponentModel;
    using System.IO;
    using System.Runtime.Serialization;
    using System.Xml.Serialization;
    
    using Gorba.Center.Common.Wpf.Framework.Controllers;

    public class DataViewModelFactory
    {
        public DataViewModelFactory(ICommandRegistry commandRegistry)
        {
            this.CommandRegistry = commandRegistry;
        }

        public ICommandRegistry CommandRegistry { get; private set; }
<#
    foreach (var partition in entitySpace.Partitions)
    {
        this.WritePartition(partition, userDefinedPropertiesEnabledEntityNames);
    }
#>
    }
<#
    foreach (var partition in entitySpace.Partitions)
    {
        foreach (var entity in partition.Entities.Where(entity => entity.HasChangeTracking))
        {
            if (userDefinedPropertiesEnabledEntityNames.Contains(entity.Name))
            {
                this.WriteUdpContextInterface(entity);
            }
        }
    }
#>
}<#+
    private void WritePartition(EntitySpace.Partition partition, IEnumerable<string> userDefinedPropertiesEnabledEntityNames)
    {
        foreach (var entity in partition.Entities.Where(entity => entity.HasChangeTracking))
        {
            var userDefinedPropertiesEnabled = userDefinedPropertiesEnabledEntityNames.Contains(entity.Name);
            this.WriteEntity(entity, partition, userDefinedPropertiesEnabled);
        }
    }

    private void WriteEntity(EntitySpace.Entity entity, EntitySpace.Partition partition, bool userDefinedPropertiesEnabled)
    {
        this.WriteReadOnlyDataViewModel(entity, partition, userDefinedPropertiesEnabled);
        this.WriteDataViewModel(entity, partition, userDefinedPropertiesEnabled);
    }
    
    private void WriteReadOnlyDataViewModel(EntitySpace.Entity entity, EntitySpace.Partition partition, bool userDefinedPropertiesEnabled)
    {#>

        public <#= partition.Name #>.<#= entity.Name #>ReadOnlyDataViewModel CreateReadOnly(
            Gorba.Center.Common.ServiceModel.ChangeTracking.<#= partition.Name #>.<#= entity.Name #>ReadableModel readableModel<#=
        userDefinedPropertiesEnabled ? ", I" + entity.Name + "UdpContext context = null" : ""
            #>)
        {
            return new <#= partition.Name #>.<#= entity.Name #>ReadOnlyDataViewModel(readableModel<#=
        userDefinedPropertiesEnabled ? ", context" : ""
            #>, this);
        }
        <#+
    }
    
    private void WriteDataViewModel(EntitySpace.Entity entity, EntitySpace.Partition partition, bool userDefinedPropertiesEnabled)
    {
    #>

        public <#= partition.Name #>.<#= entity.Name #>DataViewModel Create(
            <#= partition.Name #>.<#= entity.Name #>ReadOnlyDataViewModel readOnlyDataViewModel)
        {
            return new <#= partition.Name #>.<#= entity.Name #>DataViewModel(readOnlyDataViewModel, this);
        }

        public <#= partition.Name #>.<#= entity.Name #>DataViewModel Create(
            Gorba.Center.Common.ServiceModel.ChangeTracking.<#= partition.Name #>.<#= entity.Name #>WritableModel writableModel<#=
        userDefinedPropertiesEnabled ? ", I" + entity.Name + "UdpContext context = null" : ""
            #>)
        {
            return new <#= partition.Name #>.<#= entity.Name #>DataViewModel(writableModel<#=
        userDefinedPropertiesEnabled ? ", context" : ""
            #>, this);
        }
<#+
    }
    
    private void WriteUdpContextInterface(EntitySpace.Entity entity)
    {#>

    public interface I<#= entity.Name #>UdpContext
    {
        IEnumerable<string> GetAdditional<#= entity.Name #>Properties();
    }
<#+
    }
#>