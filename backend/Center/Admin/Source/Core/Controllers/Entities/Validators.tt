<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ ImportProject Processor="ImportProjectDirectiveProcessor" Projects="..\..\..\..\..\Common\Source\T4Templating\Center.Common.T4Templating.csproj" UnloadGenerationAppDomain="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ import namespace="Gorba.Center.Common.T4Templating" #>
<#@ output extension=".generated.cs" #>
<#
    var path = this.Host.ResolvePath(@"..\..\..\..\..\Common\Source\ServiceModel\EntitySpace.xml");
    var entitySpace = EntitySpace.Load(path);
#>
namespace Gorba.Center.Admin.Core.Controllers.Entities
{
    using System;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Collections.Specialized;
    using System.IO;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Threading.Tasks;
    using System.Xml.Serialization;
    
    using Gorba.Center.Common.ServiceModel;
    using Gorba.Center.Common.ServiceModel.ChangeTracking;

    using Gorba.Center.Common.Wpf.Client.Controllers;
    using Gorba.Center.Common.Wpf.Framework.Controllers;
    
    using Gorba.Center.Admin.Core.DataViewModels;

<#
    foreach (var partition in entitySpace.Partitions)
    {
        this.WritePartition(partition);
    }
#>
}<#+

    private void WritePartition(EntitySpace.Partition partition)
    { #>

    namespace <#= partition.Name #>
    {
        using Gorba.Center.Admin.Core.DataViewModels.<#= partition.Name #>;
        using Gorba.Center.Admin.Core.ViewModels.Stages.<#= partition.Name #>;
        using Gorba.Center.Common.ServiceModel.ChangeTracking.<#= partition.Name #>;
        using Gorba.Center.Common.ServiceModel.Filters.<#= partition.Name #>;
        <#+
        foreach (var entity in partition.Entities.Where(entity => entity.HasChangeTracking))
        {
            this.WriteEntity(entity, partition);
        }
        #>

    }
<#+
    }

    private void WriteEntity(EntitySpace.Entity entity, EntitySpace.Partition partition)
    {
        var properties = entity.Properties.Where(p => !(p is EntitySpace.CollectionProperty));
        #>

        public partial class <#= entity.Name #>Validator : EntityValidatorBase
        {
            public <#= entity.Name #>Validator(<#= entity.Name #>DataViewModel dataViewModel, DataController dataController)
                : base(dataViewModel, dataController)
            {
                this.DataViewModel = dataViewModel;
            }

            public <#= entity.Name #>DataViewModel DataViewModel { get; private set; }
            <#+
        foreach (var property in properties)
        {
            #>

            partial void Validate<#= property.Name #>(<#= entity.Name #>DataViewModel dvm);
            <#+
        }
                #>

            partial void Validate(string propertyName, <#= entity.Name #>DataViewModel dvm);
            
            protected override void HandleDataViewModelChange(string propertyName)
            {
                base.HandleDataViewModelChange(propertyName);<#+
        foreach (var property in properties)
        {
            #>


                if (propertyName == "<#= property.Name #>" || propertyName == null)
                {<#+

            if (property is EntitySpace.Property && ((EntitySpace.Property)property).IsXmlSerialized)
            {
                #>

                    this.ValidateXml("<#= property.Name #>", this.DataViewModel.<#= property.Name #>);<#+
            }#>
            
                    this.Validate<#= property.Name #>(this.DataViewModel);
                }<#+
        }
                #>

                this.Validate(propertyName, this.DataViewModel);
            }
        }
        <#+
    }
#>