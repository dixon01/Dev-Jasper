<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Schema" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ include file="..\..\..\..\Common\Configuration\Source\Protran\Vdv301\Vdv301Protocol.ttinclude" #>
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.IO;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

using Gorba.Common.Configuration.Protran.VDV301;
using Gorba.Common.Protocols.Vdv301.Messages;
using Gorba.Common.Protocols.Vdv301.Services;
using Gorba.Common.Protocols.Ximple;

using Gorba.Common.Utility.Core;

using Gorba.Motion.Common.IbisIP.Client;
using Gorba.Motion.Common.IbisIP.Discovery;

using Gorba.Motion.Protran.Vdv301.Handlers;

using NLog;

namespace Gorba.Motion.Protran.Vdv301
{
    public partial class Vdv301Protocol : IHandlerContext
    {
<#
    var services = LoadSupportedServices(this.Host.ResolvePath(@"..\..\..\..\Common\Configuration\Source\Protran\Vdv301\SupportedServices.xml"));
    
    foreach (var service in services)
    {
        this.GenerateHttpServiceMembers(service);
    }
#>
        private void ServiceHandlerOnDataUpdated(object sender, DataUpdateEventArgs<object> e)
        {
            this.RaiseDataUpdated(e);
        }

        private void ServiceHandlerOnXimpleCreated(object sender, XimpleEventArgs e)
        {
            this.RaiseXimpleCreated(e);
        }
    }

    public interface IHandlerContext : IHandlerConfigContext
    {<#
    foreach (var service in services)
    {
        #>

        event EventHandler <#= service.Name #>Changed;
<#
    }
    
    foreach (var service in services)
    {
        #>

        I<#= service.Name #> <#= service.Name #> { get; }
<#
    }
#>
    }
}

<#+
private void GenerateHttpServiceMembers(Service service)
{
    #>
        ////////////////////// <#= service.Name #> //////////////////////

        private I<#= service.Name #> proxy<#= service.Name #>;
        private <#= service.Name #>Handler handler<#= service.Name #>;
        private IServiceQuery<I<#= service.Name #>> query<#= service.Name #>;
        
        public event EventHandler <#= service.Name #>Changed;
        
        public I<#= service.Name #> <#= service.Name #>
        {
            get
            {
                return this.proxy<#= service.Name #>;
            }

            private set
            {
                this.proxy<#= service.Name #> = value;
                this.Raise<#= service.Name #>Changed(EventArgs.Empty);
            }
        }

        private void Initialize<#= service.Name #>()
        {
            var cfg = this.Config.Services.<#= service.Name #>;
            var staticAddress = !string.IsNullOrEmpty(cfg.Host) && cfg.Port != 0;

            if (staticAddress)
            {
                this.<#= service.Name #> =
                    ServiceClientProxyFactory.Create<I<#= service.Name #>>(
                        cfg.Host, cfg.Port, cfg.Path, this.callbackServer);
            }

            this.handler<#= service.Name #> = new <#= service.Name #>Handler();
            this.handler<#= service.Name #>.DataUpdated += this.ServiceHandlerOnDataUpdated;
            this.handler<#= service.Name #>.XimpleCreated += this.ServiceHandlerOnXimpleCreated;
            this.handler<#= service.Name #>.Configure(this);
            this.handler<#= service.Name #>.Start();
            
            if (!staticAddress)
            {
                this.query<#= service.Name #> = this.serviceLocator.QueryServices<I<#= service.Name #>>();
                this.query<#= service.Name #>.ServicesChanged += this.Query<#= service.Name #>OnServicesChanged;
                this.query<#= service.Name #>.Start();
            }
        }

        private void Query<#= service.Name #>OnServicesChanged(object sender, EventArgs e)
        {
            var query = this.query<#= service.Name #>;
            if (query == null)
            {
                return;
            }

            if (this.<#= service.Name #> != null && Array.IndexOf(query.Services, this.<#= service.Name #>) < 0)
            {
                this.<#= service.Name #> = null;
            }

            if (this.<#= service.Name #> == null && query.Services.Length > 0)
            {
                this.<#= service.Name #> = query.Services[0];
            }
        }

        private void Deinitialize<#= service.Name #>()
        {
            if (this.query<#= service.Name #> != null)
            {
                this.query<#= service.Name #>.ServicesChanged -= this.Query<#= service.Name #>OnServicesChanged;
                this.query<#= service.Name #>.Stop();
                this.query<#= service.Name #> = null;
            }
            
            this.handler<#= service.Name #>.DataUpdated -= this.ServiceHandlerOnDataUpdated;
            this.handler<#= service.Name #>.XimpleCreated -= this.ServiceHandlerOnXimpleCreated;
            this.handler<#= service.Name #>.Stop();
        }
        
        protected virtual void Raise<#= service.Name #>Changed(EventArgs e)
        {
            var handler = this.<#= service.Name #>Changed;
            if (handler != null)
            {
                handler(this, e);
            }
        }
    
<#+
}
#>