// <auto-generated/>
namespace Gorba.Motion.Obc.Terminal.Control
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    using Gorba.Motion.Obc.Terminal.Core;

    // ReSharper disable InconsistentNaming
    internal class ml
    {
        private static readonly CultureInfo DefaultCulture = new CultureInfo("en");

        private static string RootNamespace = "Gorba.Motion.Obc.Terminal.Control";

        private static readonly ResourceManager ResMgr;

        private static ResourceSet ResSet;

        static ml()
        {
            ResMgr = new ResourceManager(RootNamespace + ".MultiLang", Assembly.GetExecutingAssembly()); // MLHIDE

            LanguageManager.Instance.CurrentLanguageChanging += (s, e) => UpdateLanguage(e.Language);
            UpdateLanguage(LanguageManager.Instance.CurrentLanguage);
        }

        public static void ml_UseCulture(CultureInfo ci)
        {
            ResSet = ResMgr.GetResourceSet(ci, true, true);
        }

        public static string ml_string(int StringID, string Text)
        {
            return ml_resource(StringID);
        }

        public static string[] GetMenuStrings(int StringID, string dummy)
        {
            return GetMenuStrings(StringID);
        }

        /// <summary>
        ///   This method was not created from the Multilanguage Add-In. 
        /// 
        ///   Used for to create the menu
        /// </summary>
        /// <param name = "StringID"></param>
        /// <returns>An array with size 3.<br></br>
        ///   index 0: DE
        ///   index 1: FR
        ///   index 2: EN
        ///   Same as Config.Language index
        /// </returns>
        public static string[] GetMenuStrings(int StringID)
        {
            Language[] languages = LanguageManager.Instance.SupportedLanguages;
            var retVal = new string[languages.Length];

            for (int i = 0; i < languages.Length; i++)
            {
                retVal[i] = ResMgr.GetString("_" + StringID, languages[i].Culture);
            }

            return retVal;
        }

        public static string ml_resource(int StringID)
        {
            // Resource IDs are now prefixed with "_"
            string retVal;
            if (ResSet == null)
            {
                retVal = ResMgr.GetString("_" + StringID); // MLHIDE
            }
            else
            {
                retVal = ResSet.GetString("_" + StringID); // MLHIDE
            }

            if (retVal == null)
            {
                retVal = ResMgr.GetString("_" + StringID, DefaultCulture); // MLHIDE
            }

            return retVal;
        }

        private static void UpdateLanguage(Language language)
        {
            ml_UseCulture(language.Culture);
        }

        public static string[] SupportedCultures = { "de", "en", "fr" }; // MLHIDE
    }
}