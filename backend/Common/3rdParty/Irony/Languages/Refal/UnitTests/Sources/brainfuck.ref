* Brainfuck interpreter in Refal
* http://en.wikipedia.org/wiki/Brainfuck

* Written by Y [07-10-11] <yallie@yandex.ru>

$ENTRY Go { =

  * Hello, World!
  <Brainfuck
    '++++++++[>+++++++++<-]>.-<+++++[>++++++<-]>.+++++++..+++.'
    '>++++++[>+++++++<-]>++.<++++[>---<-]>.'
    '>++++++++[>+++++++++++<-]>-.<<<<.+++.------.--------.>>+.'
  >

  * Echo input
  <Brainfuck ',[.,]'>

  * Reverse input
  <Brainfuck '+[>,]<-[+.<-]'>
}

* Sample input for the program (real console input cannot be implemented yet)
SampleInput { =
  'irony refal rules';
}

* Execute the program and print out its output
Brainfuck {
  e.Program, <Run (e.Program) (<InitialState>) (<SampleInput>)>: {
    (e.None) (e.State) (e.Input) e.Output = <Prout e.Output>;
    e.AnythingElse = <Prout e.AnythingElse>;
  }
}

* Initial state of the Brainfuck machine
* Braces denote the caret position
InitialState { =
  <Chr 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0> (<Chr 0>)
  <Chr 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0>
}

* Run program step by step recursively
Run {
  (s.Step e.Rest) (e.State) (e.Input) e.Output =
     <Run <RunStep (s.Step e.Rest) (e.State) (e.Input) e.Output>>;

  * Stop recursion if the program is completed
  e.1 = e.1;
}

* Execute one step of the interpreter
RunStep {

* basic operations
  ('<' e.P) (e.S) (e.I) e.O = (e.P) (<GoLeft e.S>) (e.I) e.O;
  ('>' e.P) (e.S) (e.I) e.O = (e.P) (<GoRight e.S>) (e.I) e.O;
  ('+' e.P) (e.S) (e.I) e.O = (e.P) (<Increase e.S>) (e.I) e.O;
  ('-' e.P) (e.S) (e.I) e.O = (e.P) (<Decrease e.S>) (e.I) e.O;

* i/o operations
  ('.' e.P) (e.S) (e.I) e.O = (e.P) (e.S) (e.I) e.O <Output e.S>;
  (',' e.P) (e.S) (s.I1 e.I2) e.O = (e.P) (<Input s.I1 e.S>) (e.I2) e.O;
  (',' e.P) (e.S) (e.I) e.O = (e.P) (<Input <Chr 0> e.S>) (e.I) e.O;

* loops
  (']' e.P) (e.S) (e.I) e.O = <Dg StartLoop> (e.S) (e.I) e.O;
  ('[' e.L ']' e.P) (e.S) (e.I) e.O, <IsZero e.S>: {
      True = (e.P) (e.S) (e.I) e.O;
      False = <Br StartLoop '=' ('[' e.L ']' e.P)>
          <Run (e.L ']' e.P) (e.S) (e.I) e.O>;
  };

* comments
  (s.1 e.P) (e.S) (e.I) e.O = (e.P) (e.S) (e.I) e.O;
}

* Move caret to the left
GoLeft {
  e.Left s.1 (s.2) e.Right = e.Left (s.1) s.2 e.Right;
  e.1 = <Prout 'Warning! Stepped into the left border.'> e.1;
}

* Move caret to the right
GoRight {
  e.Left (s.1) s.2 e.Right = e.Left s.1 (s.2) e.Right;
  e.1 = <Prout 'Warning! Stepped into the right border.'> e.1;
}

* Increase char at the caret position
Increase {
  e.Left (s.1) e.Right = e.Left ( <Chr <+ <Ord s.1> 1>> ) e.Right;
}

* Decrease char at the caret position
Decrease {
  e.Left (s.1) e.Right = e.Left ( <Chr <- <Ord s.1> 1>> ) e.Right;
}

* Write out char at the caret position
Output {
  e.Left (s.1) e.Right = s.1;
}

* Read char at the caret position
Input {
  s.Input e.Left (s.1) e.Right = e.Left ( s.Input ) e.Right;
  e.1 = <Prout 'Error! Inconsistent state for ,'> e.1;
}

* Check if the char at the caret is zero
IsZero  {
  e.Left ( s.1 ) e.Right, <Chr 0>: s.1 = True;
  e.1 = False;
}
